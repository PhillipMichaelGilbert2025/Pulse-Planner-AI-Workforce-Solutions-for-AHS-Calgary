"""
Pulse Planner AI
Author: Phillip Gilbert

Scheduling assistant for Alberta Health Services (AHS) clinics.
"""

from datetime import datetime, timedelta
import random

# ---------- API Key embedded directly ----------
API_KEY = ""
# ----------------------------------------------------------------

# Common headers for future REST calls
HEADERS = {"Authorization": f"Bearer {API_KEY}"}

# Define data structures
class Patient:
    def __init__(self, name, priority, duration):
        self.name = name
        self.priority = priority  # 1 (low) to 5 (high)
        self.duration = duration  # in minutes

class Staff:
    def __init__(self, name, availability, preferences=None):
        self.name = name
        self.availability = availability  # list of (start_time, end_time) tuples
        self.preferences = preferences or {}  # e.g., {"pref_hours": (9, 12), "pref_priority": 3}

# Notification functions
def send_patient_notification(patient, staff_name, appointment_time, duration, appt_id, location):
    message = (
        f"Patient Notification:\n"
        f"Hello {patient.name},\n"
        f"Your {duration}-minute appointment with {staff_name} is confirmed!\n"
        f"{location}\n"
        f"Date/Time: {appointment_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"Appointment ID: {appt_id}\n"
        f"We look forward to seeing you!\n"
    )
    print(message)
    return message

def send_staff_notification(patient, staff_name, appointment_time, duration, appt_id):
    if not staff_name.startswith("Dr. "):
        staff_name = f"Dr. {staff_name}"
    message = (
        f"{staff_name},\n"
        f"You have a new {duration}-minute appointment scheduled.\n"
        f"Patient: {patient.name} (Priority: {patient.priority})\n"
        f"Date/Time: {appointment_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"Appointment ID: {appt_id}\n"
    )
    print("Staff Notification:\n" + message)
    return message

def generate_random_workday(start_date, end_date):
    while True:
        candidate = start_date + timedelta(days=random.randint(0, (end_date - start_date).days))
        if candidate.weekday() < 5:  # Monday to Friday only
            return candidate

def meets_preferences(staff, patient):
    if not staff.preferences:
        return True
    pref_priority = staff.preferences.get("pref_priority")
    return not (pref_priority and patient.priority < pref_priority)

def schedule_appointment(patient, staff_list, assigned_dates):
    for staff in staff_list:
        if meets_preferences(staff, patient):
            date = generate_random_workday(datetime(2025, 1, 1), datetime(2025, 12, 31))
            while date.date() in assigned_dates:
                date = generate_random_workday(datetime(2025, 1, 1), datetime(2025, 12, 31))
            assigned_dates.add(date.date())
            slot = date.replace(hour=random.randint(8, 16), minute=random.choice([0,15,30,45]))
            return staff.name, slot
    return None

def run_pulse_planner_ai():
    assigned_dates = set()
    patients = [
        Patient("Alice Johnson", 3, 30), Patient("Bob Williams", 5, 45), Patient("Charlie Brown", 2, 60),
        Patient("David Smith", 4, 30), Patient("Emma Davis", 1, 45), Patient("Frank Miller", 3, 60),
        Patient("Grace Wilson", 5, 30), Patient("Henry Moore", 2, 45), Patient("Isabella Taylor", 4, 60),
        Patient("Jack Anderson", 3, 30), Patient("Katherine Thomas", 1, 45), Patient("Liam White", 5, 60),
        Patient("Mia Harris", 2, 30), Patient("Noah Martin", 4, 45), Patient("Olivia Thompson", 3, 60),
        Patient("Patrick Lee", 1, 30), Patient("Quinn Walker", 5, 45), Patient("Rachel King", 2, 60)
    ]
    staff = [
        Staff(f"Dr. {name}", []) for name in [
            "Alexander Stone", "Jessica Green", "Michael Carter", "Sophia Adams", "Benjamin Clark",
            "Ethan Rogers", "Natalie Young", "Daniel Scott", "Ava Parker", "Samuel Phillips",
            "Chloe Evans", "Dylan Martinez", "Madeline Cooper", "Owen Sanchez", "Eleanor Foster",
            "Nathan Gray", "Lillian Hall", "Jack Reed", "Harper Price", "William Stewart",
            "Zoe Jenkins", "Mason Brooks", "Amelia Bell", "Lucas Ramirez", "Charlotte Morris",
            "James Hughes", "Emily Ross", "Jacob Peterson"
        ]
    ]
    locations = [
        "South Health Campus - Calgary, AB, Canada",
        "Rockyview General Hospital - Calgary, AB, Canada"
    ]
    schedule = {}
    for i, patient in enumerate(sorted(patients, key=lambda x: x.priority, reverse=True)):
        res = schedule_appointment(patient, staff, assigned_dates)
        if res:
            name, time = res
            appt = f"A{random.randint(1000,9999)}"
            loc = locations[i % len(locations)]
            schedule[patient.name] = (name, time, appt, loc)
            send_patient_notification(patient, name, time, patient.duration, appt, loc)
            send_staff_notification(patient, name, time, patient.duration, appt)
        else:
            schedule[patient.name] = "No available slot within preferences"
    print("\nPulsePlannerAI Generated Schedule:")
    for p, d in schedule.items():
        if isinstance(d, tuple):
            name, time, appt, loc = d
            print(f"{p} scheduled with {name} at {time.strftime('%Y-%m-%d %H:%M')} (ID: {appt}), Location: {loc}")
        else:
            print(f"{p}: {d}")

if __name__ == "__main__":
    run_pulse_planner_ai()
