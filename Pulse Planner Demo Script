"""
Pulse Planner AI
Author: Phillip Gilbert

Scheduling assistant for Alberta Health Services (AHS) clinics.
"""

from datetime import datetime, timedelta
import random

# ---------- API Key embedded directly ----------
API_KEY = ""
# ----------------------------------------------------------------

# Common headers for future REST calls
HEADERS = {"Authorization": f"Bearer {API_KEY}"}

# Define data structures
class Patient:
    def __init__(self, name, priority, duration):
        self.name = name
        self.priority = priority  # 1 (low) to 5 (high)
        self.duration = duration  # in minutes

class Staff:
    def __init__(self, name, availability, preferences=None):
        self.name = name
        self.availability = availability  # list of (start_time, end_time) tuples
        self.preferences = preferences or {}  # e.g., {"pref_hours": (9, 12), "pref_priority": 3}

# Notification functions
def send_patient_notification(patient, staff_name, appointment_time, duration, appt_id, location):
    message = (
        f"Patient Notification:\n"
        f"Hello {patient.name},\n"
        f"Your {duration}-minute appointment with {staff_name} is confirmed!\n"
        f"{location}\n"
        f"Date/Time: {appointment_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"Appointment ID: {appt_id}\n"
        f"We look forward to seeing you!\n"
    )
    print(message)
    return message

def send_staff_notification(patient, staff_name, appointment_time, duration, appt_id):
    if not staff_name.startswith("Dr. "):
        staff_name = f"Dr. {staff_name}"
    message = (
        f"{staff_name},\n"
        f"You have a new {duration}-minute appointment scheduled.\n"
        f"Patient: {patient.name} (Priority: {patient.priority})\n"
        f"Date/Time: {appointment_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"Appointment ID: {appt_id}\n"
    )
    print("Staff Notification:\n" + message)
    return message

def generate_random_workday(start_date, end_date):
    while True:
        candidate = start_date + timedelta(days=random.randint(0, (end_date - start_date).days))
        if candidate.weekday() < 5:  # Monday to Friday only
            return candidate


